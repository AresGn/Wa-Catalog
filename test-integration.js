#!/usr/bin/env node
require('dotenv').config();

const supabase = require('./bot/services/supabase');
const formatter = require('./bot/services/formatter');
const gemini = require('./bot/services/gemini');

console.log('üß™ Test d\'int√©gration Bot-DB-Dashboard\n');
console.log('‚ïê'.repeat(50));

async function testIntegration() {
  let testsPass√©s = 0;
  let testsTotal = 0;

  // Test 1: Connexion Supabase
  console.log('\nüìä Test 1: Connexion √† Supabase...');
  testsTotal++;
  try {
    const stats = await supabase.getBotStats();
    if (stats !== null) {
      console.log('‚úÖ Connexion Supabase OK');
      console.log(`   Utilisateurs: ${stats.totalUsers}, Recherches: ${stats.totalSearches}`);
      testsPass√©s++;
    } else {
      console.log('‚ùå Erreur: Impossible de r√©cup√©rer les stats');
    }
  } catch (error) {
    console.log('‚ùå Erreur Supabase:', error.message);
  }

  // Test 2: Cr√©ation utilisateur
  console.log('\nüë§ Test 2: Cr√©ation/Mise √† jour utilisateur...');
  testsTotal++;
  try {
    const testPhone = '22999999999@c.us';
    const user = await supabase.createOrUpdateUser(testPhone, 'Test User');
    if (user) {
      console.log('‚úÖ Utilisateur cr√©√©/mis √† jour');
      console.log(`   ID: ${user.id}, Phone: ${user.phone_number}`);
      testsPass√©s++;
    } else {
      console.log('‚ùå Erreur: Impossible de cr√©er l\'utilisateur');
    }
  } catch (error) {
    console.log('‚ùå Erreur cr√©ation utilisateur:', error.message);
  }

  // Test 3: Log de recherche
  console.log('\nüîç Test 3: Enregistrement d\'une recherche...');
  testsTotal++;
  try {
    const searchData = {
      userPhone: '22999999999@c.us',
      query: 'test iPhone 13',
      resultsCount: 5,
      responseTime: 250
    };
    const search = await supabase.logSearch(searchData);
    if (search) {
      console.log('‚úÖ Recherche enregistr√©e');
      console.log(`   ID: ${search.id}, Query: ${search.query}`);
      testsPass√©s++;
    } else {
      console.log('‚ùå Erreur: Impossible d\'enregistrer la recherche');
    }
  } catch (error) {
    console.log('‚ùå Erreur log recherche:', error.message);
  }

  // Test 4: Service Formatter
  console.log('\nüìù Test 4: Service de formatage...');
  testsTotal++;
  try {
    const helpMessage = formatter.formatHelpMessage();
    if (helpMessage && helpMessage.includes('WA-CATALOG')) {
      console.log('‚úÖ Service formatter OK');
      console.log(`   Message d'aide: ${helpMessage.substring(0, 50)}...`);
      testsPass√©s++;
    } else {
      console.log('‚ùå Erreur: Formatter ne fonctionne pas');
    }
  } catch (error) {
    console.log('‚ùå Erreur formatter:', error.message);
  }

  // Test 5: Service Gemini (si configur√©)
  if (process.env.GEMINI_API_KEY) {
    console.log('\nü§ñ Test 5: Service Gemini AI...');
    testsTotal++;
    try {
      const intent = await gemini.analyzeIntent('Je cherche un iPhone 13');
      if (intent && intent.intent) {
        console.log('‚úÖ Service Gemini OK');
        console.log(`   Intent d√©tect√©: ${intent.intent}`);
        testsPass√©s++;
      } else {
        console.log('‚ö†Ô∏è  Gemini configur√© mais r√©ponse invalide');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Erreur Gemini (non critique):', error.message);
    }
  } else {
    console.log('\n‚è≠Ô∏è  Test 5: Gemini AI skipp√© (pas de cl√© API)');
  }

  // Test 6: Analytics
  console.log('\nüìà Test 6: Enregistrement analytics...');
  testsTotal++;
  try {
    const analyticsData = {
      eventType: 'test_integration',
      userPhone: 'system',
      eventData: {
        test: true,
        timestamp: new Date().toISOString()
      },
      responseTime: 100
    };
    const analytics = await supabase.logAnalytics(analyticsData);
    if (analytics) {
      console.log('‚úÖ Analytics enregistr√©');
      console.log(`   Event: ${analytics.event_type}`);
      testsPass√©s++;
    } else {
      console.log('‚ùå Erreur: Impossible d\'enregistrer analytics');
    }
  } catch (error) {
    console.log('‚ùå Erreur analytics:', error.message);
  }

  // Test 7: Configuration Bot
  console.log('\n‚öôÔ∏è  Test 7: Configuration du bot...');
  testsTotal++;
  try {
    const config = await supabase.getConfig('welcome_message');
    if (config) {
      console.log('‚úÖ Configuration r√©cup√©r√©e');
      console.log(`   Welcome message configur√©`);
      testsPass√©s++;
    } else {
      console.log('‚ö†Ô∏è  Pas de configuration (normal si tables vides)');
      testsPass√©s++; // On consid√®re que c'est OK
    }
  } catch (error) {
    console.log('‚ùå Erreur config:', error.message);
  }

  // Test 8: Recherche produits
  console.log('\nüõçÔ∏è  Test 8: Recherche de produits...');
  testsTotal++;
  try {
    const products = await supabase.searchProducts('test');
    console.log('‚úÖ Recherche produits OK');
    console.log(`   ${products.length} produits trouv√©s`);
    testsPass√©s++;
  } catch (error) {
    console.log('‚ùå Erreur recherche produits:', error.message);
  }

  // R√©sultats finaux
  console.log('\n' + '‚ïê'.repeat(50));
  console.log('\nüìä R√âSULTATS DES TESTS:');
  console.log(`   ‚úÖ Tests r√©ussis: ${testsPass√©s}/${testsTotal}`);
  console.log(`   üìà Taux de r√©ussite: ${Math.round((testsPass√©s/testsTotal)*100)}%`);
  
  if (testsPass√©s === testsTotal) {
    console.log('\nüéâ TOUS LES TESTS SONT PASS√âS!');
    console.log('   Le bot est pr√™t √† √™tre utilis√©.');
  } else if (testsPass√©s >= testsTotal * 0.7) {
    console.log('\n‚úÖ INT√âGRATION FONCTIONNELLE');
    console.log('   La plupart des composants fonctionnent.');
  } else {
    console.log('\n‚ö†Ô∏è  INT√âGRATION PARTIELLE');
    console.log('   V√©rifiez la configuration et les tables DB.');
  }

  console.log('\nüí° Prochaines √©tapes:');
  console.log('   1. npm run dev       - D√©marrer le bot');
  console.log('   2. npm run admin:dev - D√©marrer le dashboard');
  console.log('   3. Scannez le QR code WhatsApp');
  console.log('   4. Envoyez des messages test au bot');
  console.log('   5. V√©rifiez les stats sur http://localhost:3000/bot\n');
}

// Ex√©cuter les tests
testIntegration().catch(console.error);
